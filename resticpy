#!/usr/bin/env python3

# import packages
import json
import argparse
import string
import os
from sys import platform
from sys import exit
import tempfile
import subprocess

# Parse the aruments
def parse_args():
	parser = argparse.ArgumentParser(description='A Python wrapper for Restic using a json configuration file.')
	parser.add_argument('-i','--init',action='store_true',help='Init a repository')
	parser.add_argument('-b','--backup',action='store_true',help='Perform the backup (default option).')
	parser.add_argument('-s','--snapshots',action='store_true',help='Print the snapshots.')
	parser.add_argument('-f','--forget',metavar='POLICY', type=str, nargs='*',help='Forget the snapshots with the specified policy.')
	parser.add_argument('-d','--dry-run',action='store_true',help='Force dry run.')
	parser.add_argument('-e','--echo',action='store_true',help='Echo the restic commands only.')
	parser.add_argument('-m','--mount',metavar='FOLDER', type=str, nargs=1,help='Mount a repository (only one configuration file allowed).')
	parser.add_argument('-c','--conf',metavar='FILE(s)/FOLDER(s)', type=str, nargs='*', help='Specify the configuration json file(s) (default is restic-conf.json) or its location folder(s)')
	subparsers = parser.add_subparsers(dest='command')
	genconf= subparsers.add_parser('genconf',help='Generate a configuration file in $HOME')
	genconf.add_argument('-n','--name', type=str, nargs=1, help='Set the name of the configuration file (defualt is restic-conf.json)')
	genconf.add_argument('-d','--dir', type=str, nargs=1, help='Set the location of the configuration file (defualt is $HOME')
	genconf.add_argument('-r','--repo', type=str, nargs=1, help='Set the repository path')
	genconf.add_argument('-p','--passwd', type=str, nargs=1, help='Set the repository password')
	genconf.add_argument('-i','--init',action='store_true',help='Init the repository')
	args = parser.parse_args()
	#check optional args - if all false then backup=true
	is_backup_default = (not args.backup) and (not args.snapshots) and (args.forget is None) and (not args.init) and (not args.mount)
	if is_backup_default:
		args.backup = True
	#return
	return args

# Gen (default) conf file
def genconf(args):
	if not args.name:
		args.name = ['restic-conf.json']
	homeenv = "${HOME}"
	if platform == "win32":
		homeenv = '${USERPROFILE}'
	homedir = string.Template(homeenv).substitute(os.environ)
	if not args.dir:
		args.dir = [homedir]
	else:
		args.dir = [string.Template(args.dir[0]).substitute(os.environ)]
	if not args.passwd:
		args.passwd = ['password']
	if not args.repo:
		args.repo = [os.path.join(homedir, '.resticpy-backup')]
	conf = {} #init dictionary
	conf["repo"] = args.repo[0]
	conf["passwd"] = args.passwd[0]
	entry = {}
	entry["source"] = [homeenv]
	entry["exclude"] = [".*"]
	conf["entry"] = [entry]
	fill_json(conf)
	#Name of conf file
	conf_file = args.dir[0] + '/' + args.name[0]
	#Check for existing files
	if os.path.isfile(conf_file):
		if os.path.isfile(conf_file + '.backup'):
			print("unable to generate json file")
			exit()
		os.rename(conf_file, conf_file + '.backup')
	#Save conf file
	jsonfile = open(conf_file, "w")
	json.dump(conf, jsonfile, indent=4)
	jsonfile.close()
	print('json file %s generated' % os.path.join(args.dir[0], args.name[0]))
	#Init
	if args.init:
		#set passwd env for restic
		os.environ["RESTIC_PASSWORD"] = conf["passwd"]
		init(conf, args, conf_file)

# Check json conf
def check_json(conf, file):
	e = ''
	if not "repo" in conf:
		e = 'Missing key "repo"'
	elif not conf["repo"]:
		e = 'Empty key "repo"'
	elif not "passwd" in conf:
		e = 'Missing key "passwd"'
	elif not conf["passwd"]:
		e = 'Empty key "passwd"'
	elif not "entry" in conf:
		e = 'Missing key "entry"'
	elif not conf["entry"]:
		e = 'Empty key "entry"'
	else:
		for entry in conf["entry"]:
			if not "source" in entry:
				e = 'Missing key "source"'
				break
			if not entry["source"]:
				e = 'Empty key "source"'
				break
	if e:
		print('invalid json: %s in %s' % (e,file))
		return False
	return True

# Fill json conf
def fill_json(conf):
	if not "init" in conf:
		conf["init"] = False
	if not "dry-run" in conf:
		conf["dry-run"] = False
	for entry in conf["entry"]:
		if not "tag" in entry:
			entry["tag"] = []
		if not "sudo" in entry:
			entry["sudo"] = False
		if not "keeplast" in entry:
			entry["keeplast"] = -1
		if entry["keeplast"] == "NaN":
			entry["keeplast"] = -1
		if entry["keeplast"] == "Inf":
			entry["keeplast"] = -1
		if not "exclude" in entry:
			entry["exclude"] = []
		if not "skip" in entry:
			entry["skip"] = False

# Load config json
def load_conf(args):
	conf_file = args.conf
	search_path = []
	is_file = True
	is_dir = True
	if not conf_file: #case empty
		homeenv = '${HOME}'
		if platform == "win32":
			homeenv = '${USERPROFILE}'
		search_path = [homeenv, homeenv + '/.config', '.']
	else: #there is sth, either files or folders
		#check if all files or all folders
		for item in conf_file:
			item_sub = string.Template(item).substitute(os.environ)
			if not os.path.isfile(item_sub):
				is_file = False
			if not os.path.isdir(item_sub):
				is_dir = False
		if not is_file and not is_dir:
			print('invalid json: specified --conf options must be either all files or all folders')
			exit()
		if is_file and is_dir:
			print('invalid json: parsing error')
			exit()
		#if folders set the search_path
		if is_dir:
			search_path = conf_file
			conf_file = [] #so as to look for def_name in search_path
	#look for def_neame in search_path
	def_name = 'restic-conf.json'
	for path in search_path:
		path_sub = string.Template(path).substitute(os.environ)
		name_try = path_sub +'/' + def_name
		if os.path.isfile(name_try):
			conf_file = [name_try]
			print('json file located in %s' % name_try)
			break
	#check if empty again
	if not conf_file:
		print('invalid json: %s not found' % def_name)
		exit()
	#read files
	confs = []
	for file in conf_file:
		file_sub = string.Template(file).substitute(os.environ)
		try:
			jsonfile = open(file_sub, "r")
		except IOError:
			print('invalid json: File not found')
			exit()
		try:
			conf = json.load(jsonfile)
		except ValueError as e:
			print('invalid json: %s in %s' % (e, file_sub))
			exit()
		jsonfile.close()
		#check mandatory fields
		if not check_json(conf, file_sub):
			exit()
		#fill empty or missing (optinal) fields
		fill_json(conf)
		#parse env variables
		repo = conf["repo"]
		repo = string.Template(repo).substitute(os.environ)
		conf["repo"] = repo;
		for entry in conf["entry"]:
			for j in range(len(entry["source"])): #j=source index
				source = entry["source"][j]
				source = string.Template(source).substitute(os.environ)
				entry["source"][j] = source
		#append
		confs.append(conf)
	#return conf structure
	args.conf = conf_file #update args
	return confs

# Gen exclude file
def gen_exclude_file(exclude):
	#return if empty
	if not exclude:
		return ''
	#gen tmp file
	f = tempfile.NamedTemporaryFile(mode='w+', delete=False)
	#write to tmp file
	for entry in exclude:
		f.write(entry + '\n')
	return f.name

# Get restic commands
def get_restic_base(conf):
	#restic base
	base = 'restic ' 
	#restic repo
	repo = ' --repo ' + conf["repo"] + ' '
	#return
	return base + repo

def get_restic_exclude(entry):
	exclude = '--exclude-file '
	exclude += gen_exclude_file(entry["exclude"]) + ' '
	if not entry["exclude"]:
		exclude = ''
	return exclude

def get_restic_tag(entry):
	tag = '--tag '
	for item in entry["tag"]:
		tag += item + ' '
	if not entry["tag"]:
		tag = ''
	return tag

def get_restic_source(entry):	
	source = ''
	for item in entry["source"]:
		source += item + ' '
	return source

def get_keep_last(entry):
	keeplast = '--keep-last ' + str(entry["keeplast"]) + ' '
	return keeplast

# Run cmd
def run(cmd):
	exit = subprocess.run(cmd, shell=True)
	if not exit.returncode==0 and not platform == 'win32':
		print(exit.returncode)
		exit()

# Init
def init(conf, args, conf_file):
	#restic base
	base = get_restic_base(conf)
	#restic action
	action = 'init '
	#restic dry run
	dry_run = ''
	if conf["dry-run"] or args.dry_run:
		dry_run = '--dry-run '
	#build restic cmd
	cmd = base + action + dry_run
	#print if echo and return
	if args.echo:
		#cat cmd
			print(cmd)
			return
	#run cmd
	run(cmd)
	#conf save
	conf["init"] = True
	jsonfile = open(conf_file, "w")
	json.dump(conf, jsonfile, indent=4)
	jsonfile.close()

# Backup
def backup(conf, args):
	#restic base
	base = get_restic_base(conf)
	#restic action
	action = 'backup '
	for entry in conf["entry"]:
		if entry["skip"]:
			continue
		#sudo
		sudo = ''
		if entry["sudo"] and (platform == "linux" or platform == "linux2"):
			sudo = 'sudo '
			sudo += 'RESTIC_PASSWORD=' + conf["passwd"] + ' ' #add also env for sudo env
		#restic exclude
		exclude = get_restic_exclude(entry)
		#restic tag
		tag = get_restic_tag(entry)
		#restic source
		source = get_restic_source(entry)
		if not source:
			print("invalid json: empty source")
			exit()
		#restic dry run
		dry_run = ''
		if conf["dry-run"] or args.dry_run:
			dry_run = '--dry-run '
		#build restic cmd
		cmd = sudo + base + exclude + action + tag + source + dry_run
		#print if echo and return
		if args.echo:
		#cat cmd
			print(cmd)
			return
		#run cmd
		run(cmd)

# Snapshots
def snapshots(conf, args):
	#restic base
	base = get_restic_base(conf)
	#restic action
	action = 'snapshots '
	#restic dry run
	dry_run = ''
	#build restic cmd
	cmd = base + action + dry_run
	#print if echo and return
	if args.echo:
		#cat cmd
		print(cmd)
		return
	#run cmd
	run(cmd)

# Forget
def forget(conf, args):
	#restic base
	base = get_restic_base(conf)
	#restic action
	action = 'forget '
	#usage with no args to forget
	if len(args.forget) == 0:
		for entry in conf["entry"]:
			if entry["keeplast"] == -1:
				continue
			if entry["skip"]:
				continue
			#restic tag
			tag = get_restic_tag(entry)
			#restic policy
			keeplast = get_keep_last(entry)
			#prune flag
			prune = '--prune '
			#restic dry run
			dry_run = ''
			if conf["dry-run"] or args.dry_run:
				dry_run = '--dry-run '
			#build restic cmd
			cmd = base + action + tag + keeplast + prune + dry_run
			#print if echo and return
			if args.echo:
			#cat cmd
				print(cmd)
				return
			#run cmd
			run(cmd)
	else:
		#prune flag
		prune = '--prune '
		#restic dry run
		dry_run = ''
		if conf["dry-run"] or args.dry_run:
			dry_run = '--dry-run '
		#build restic cmd
		policy = ''
		for policy0 in args.forget:
			policy += policy0 + ' '
		cmd = base + action + policy + prune + dry_run
		#print if echo and return
		if args.echo:
		#cat cmd
			print(cmd)
			return
		#run cmd
		run(cmd)

# Mount
def mount(conf ,args):
	#restic base
	base = get_restic_base(conf)
	#mount dir
	mount = args.mount[0]
	try:
		if not os.path.exists(mount):
			os.mkdir(mount)
	except OSError as e:
		print("mount error: %s" % e)    
		exit()
	if not len(os.listdir(mount))==0:
		print("mount error: Directory must be empty")
		exit()
	#restic action
	action = 'mount '
	#restic dry run
	dry_run = ''
	if conf["dry-run"] or args.dry_run:
		dry_run = '--dry-run '
	#build restic cmd
	cmd = base + action + mount
	#print if echo and return
	if args.echo:
	#cat cmd
		print(cmd)
		return
	#run cmd
	run(cmd)

# Main function
def main():
	#parse arguments
	args = parse_args()
	#check if genconf
	if args.command == 'genconf':
		genconf(args)
		exit()
	#get config json
	confs = load_conf(args)
	#prints
	#print(args)
	#print(confs)
	#gen command
	i_conf = 0
	for conf in confs:
		#set passwd env for restic
		os.environ["RESTIC_PASSWORD"] = conf["passwd"]
		if args.init:
			if conf["init"]:
				print("repo error: already init")
				exit()
			init(conf, args, args.conf[i_conf])
		if args.backup:
			if not conf["init"]:
				print("repo error: run resticpy --init")
				exit()
			backup(conf, args)
		if not args.forget is None:
			if not conf["init"]:
				print("repo error: run resticpy --init")
				exit()
			forget(conf, args)
		if args.snapshots:
			if not conf["init"]:
				print("repo error: run resticpy --init")
				exit()
			snapshots(conf, args)
		i_conf += 1
	if args.mount:
		if platform == 'win32':
			print("Mount not working in Windows")
			exit()
		if not conf["init"]:
			print("repo error: run resticpy --init")
			exit()
		if len(confs)>1:
			print("mount error: Only one configuration file allowed")
		mount(confs[0], args)

# Entry point
if __name__ == '__main__':
	main()